{"ast":null,"code":"\"use strict\";\n\nvar _a, _b, _c;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UNPATCHED_CONSOLE = exports.CONSOLE_SEVERITY = exports.SUPPORTS_STRUCTURED_LOGS = void 0; // Determine if structured logs are supported (node >= 10). If something goes wrong,\n// assume no since unstructured is safer.\n\n/** @hidden */\n\nexports.SUPPORTS_STRUCTURED_LOGS = parseInt(((_c = (_b = (_a = process.versions) === null || _a === void 0 ? void 0 : _a.node) === null || _b === void 0 ? void 0 : _b.split('.')) === null || _c === void 0 ? void 0 : _c[0]) || '8', 10) >= 10; // Map LogSeverity types to their equivalent `console.*` method.\n\n/** @hidden */\n\nexports.CONSOLE_SEVERITY = {\n  DEBUG: 'debug',\n  INFO: 'info',\n  NOTICE: 'info',\n  WARNING: 'warn',\n  ERROR: 'error',\n  CRITICAL: 'error',\n  ALERT: 'error',\n  EMERGENCY: 'error'\n}; // safely preserve unpatched console.* methods in case of compat require\n\n/** @hidden */\n\nexports.UNPATCHED_CONSOLE = {\n  debug: console.debug,\n  info: console.info,\n  log: console.log,\n  warn: console.warn,\n  error: console.error\n};","map":{"version":3,"sources":["/Users/phuc/node_modules/firebase-functions/lib/logger/common.js"],"names":["_a","_b","_c","Object","defineProperty","exports","value","UNPATCHED_CONSOLE","CONSOLE_SEVERITY","SUPPORTS_STRUCTURED_LOGS","parseInt","process","versions","node","split","DEBUG","INFO","NOTICE","WARNING","ERROR","CRITICAL","ALERT","EMERGENCY","debug","console","info","log","warn","error"],"mappings":"AAAA;;AACA,IAAIA,EAAJ,EAAQC,EAAR,EAAYC,EAAZ;;AACAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4BF,OAAO,CAACG,gBAAR,GAA2BH,OAAO,CAACI,wBAAR,GAAmC,KAAK,CAA/F,C,CACA;AACA;;AACA;;AACAJ,OAAO,CAACI,wBAAR,GAAmCC,QAAQ,CAAC,CAAC,CAACR,EAAE,GAAG,CAACD,EAAE,GAAG,CAACD,EAAE,GAAGW,OAAO,CAACC,QAAd,MAA4B,IAA5B,IAAoCZ,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACa,IAAtE,MAAgF,IAAhF,IAAwFZ,EAAE,KAAK,KAAK,CAApG,GAAwG,KAAK,CAA7G,GAAiHA,EAAE,CAACa,KAAH,CAAS,GAAT,CAAvH,MAA0I,IAA1I,IAAkJZ,EAAE,KAAK,KAAK,CAA9J,GAAkK,KAAK,CAAvK,GAA2KA,EAAE,CAAC,CAAD,CAA9K,KAAsL,GAAvL,EAA4L,EAA5L,CAAR,IAA2M,EAA9O,C,CACA;;AACA;;AACAG,OAAO,CAACG,gBAAR,GAA2B;AACvBO,EAAAA,KAAK,EAAE,OADgB;AAEvBC,EAAAA,IAAI,EAAE,MAFiB;AAGvBC,EAAAA,MAAM,EAAE,MAHe;AAIvBC,EAAAA,OAAO,EAAE,MAJc;AAKvBC,EAAAA,KAAK,EAAE,OALgB;AAMvBC,EAAAA,QAAQ,EAAE,OANa;AAOvBC,EAAAA,KAAK,EAAE,OAPgB;AAQvBC,EAAAA,SAAS,EAAE;AARY,CAA3B,C,CAUA;;AACA;;AACAjB,OAAO,CAACE,iBAAR,GAA4B;AACxBgB,EAAAA,KAAK,EAAEC,OAAO,CAACD,KADS;AAExBE,EAAAA,IAAI,EAAED,OAAO,CAACC,IAFU;AAGxBC,EAAAA,GAAG,EAAEF,OAAO,CAACE,GAHW;AAIxBC,EAAAA,IAAI,EAAEH,OAAO,CAACG,IAJU;AAKxBC,EAAAA,KAAK,EAAEJ,OAAO,CAACI;AALS,CAA5B","sourcesContent":["\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UNPATCHED_CONSOLE = exports.CONSOLE_SEVERITY = exports.SUPPORTS_STRUCTURED_LOGS = void 0;\n// Determine if structured logs are supported (node >= 10). If something goes wrong,\n// assume no since unstructured is safer.\n/** @hidden */\nexports.SUPPORTS_STRUCTURED_LOGS = parseInt(((_c = (_b = (_a = process.versions) === null || _a === void 0 ? void 0 : _a.node) === null || _b === void 0 ? void 0 : _b.split('.')) === null || _c === void 0 ? void 0 : _c[0]) || '8', 10) >= 10;\n// Map LogSeverity types to their equivalent `console.*` method.\n/** @hidden */\nexports.CONSOLE_SEVERITY = {\n    DEBUG: 'debug',\n    INFO: 'info',\n    NOTICE: 'info',\n    WARNING: 'warn',\n    ERROR: 'error',\n    CRITICAL: 'error',\n    ALERT: 'error',\n    EMERGENCY: 'error',\n};\n// safely preserve unpatched console.* methods in case of compat require\n/** @hidden */\nexports.UNPATCHED_CONSOLE = {\n    debug: console.debug,\n    info: console.info,\n    log: console.log,\n    warn: console.warn,\n    error: console.error,\n};\n"]},"metadata":{},"sourceType":"script"}