{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.error = exports.warn = exports.info = exports.log = exports.debug = exports.write = void 0;\n\nconst util_1 = require(\"util\");\n\nconst common_1 = require(\"./logger/common\");\n\nfunction removeCircular(obj) {\n  let refs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (typeof obj !== 'object' || !obj) {\n    return obj;\n  }\n\n  if (refs.includes(obj)) {\n    return '[Circular]';\n  } else {\n    refs.push(obj);\n  }\n\n  let returnObj;\n\n  if (Array.isArray(obj)) {\n    returnObj = new Array(obj.length);\n  } else {\n    returnObj = {};\n  }\n\n  for (const k in obj) {\n    if (refs.includes(obj[k])) {\n      returnObj[k] = '[Circular]';\n    } else {\n      returnObj[k] = removeCircular(obj[k], refs);\n    }\n  }\n\n  return returnObj;\n}\n/**\n * Writes a `LogEntry` to `stdout`/`stderr` (depending on severity).\n * @param entry The `LogEntry` including severity, message, and any additional structured metadata.\n */\n\n\nfunction write(entry) {\n  if (common_1.SUPPORTS_STRUCTURED_LOGS) {\n    common_1.UNPATCHED_CONSOLE[common_1.CONSOLE_SEVERITY[entry.severity]](JSON.stringify(removeCircular(entry)));\n    return;\n  }\n\n  let message = entry.message || '';\n  const jsonPayload = {};\n  let jsonKeyCount = 0;\n\n  for (const k in entry) {\n    if (!['severity', 'message'].includes(k)) {\n      jsonKeyCount++;\n      jsonPayload[k] = entry[k];\n    }\n  }\n\n  if (jsonKeyCount > 0) {\n    message = `${message} ${JSON.stringify(removeCircular(jsonPayload), null, 2)}`;\n  }\n\n  common_1.UNPATCHED_CONSOLE[common_1.CONSOLE_SEVERITY[entry.severity]](message);\n}\n\nexports.write = write;\n/**\n * Writes a `DEBUG` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\n\nfunction debug() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  write(entryFromArgs('DEBUG', args));\n}\n\nexports.debug = debug;\n/**\n * Writes an `INFO` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\n\nfunction log() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  write(entryFromArgs('INFO', args));\n}\n\nexports.log = log;\n/**\n * Writes an `INFO` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\n\nfunction info() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  write(entryFromArgs('INFO', args));\n}\n\nexports.info = info;\n/**\n * Writes a `WARNING` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\n\nfunction warn() {\n  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  write(entryFromArgs('WARNING', args));\n}\n\nexports.warn = warn;\n/**\n * Writes an `ERROR` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\n\nfunction error() {\n  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    args[_key5] = arguments[_key5];\n  }\n\n  write(entryFromArgs('ERROR', args));\n}\n\nexports.error = error;\n/** @hidden */\n\nfunction entryFromArgs(severity, args) {\n  let entry = {};\n  const lastArg = args[args.length - 1];\n\n  if (lastArg && typeof lastArg == 'object' && lastArg.constructor == Object) {\n    entry = args.pop();\n  }\n\n  return Object.assign({}, entry, {\n    severity,\n    // mimic `console.*` behavior, see https://nodejs.org/api/console.html#console_console_log_data_args\n    message: util_1.format.apply(null, args)\n  });\n}","map":{"version":3,"sources":["/Users/phuc/node_modules/firebase-functions/lib/logger.js"],"names":["Object","defineProperty","exports","value","error","warn","info","log","debug","write","util_1","require","common_1","removeCircular","obj","refs","includes","push","returnObj","Array","isArray","length","k","entry","SUPPORTS_STRUCTURED_LOGS","UNPATCHED_CONSOLE","CONSOLE_SEVERITY","severity","JSON","stringify","message","jsonPayload","jsonKeyCount","args","entryFromArgs","lastArg","constructor","pop","assign","format","apply"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.error = exports.warn = exports.info = exports.log = exports.debug = exports.write = void 0;\nconst util_1 = require(\"util\");\nconst common_1 = require(\"./logger/common\");\nfunction removeCircular(obj, refs = []) {\n    if (typeof obj !== 'object' || !obj) {\n        return obj;\n    }\n    if (refs.includes(obj)) {\n        return '[Circular]';\n    }\n    else {\n        refs.push(obj);\n    }\n    let returnObj;\n    if (Array.isArray(obj)) {\n        returnObj = new Array(obj.length);\n    }\n    else {\n        returnObj = {};\n    }\n    for (const k in obj) {\n        if (refs.includes(obj[k])) {\n            returnObj[k] = '[Circular]';\n        }\n        else {\n            returnObj[k] = removeCircular(obj[k], refs);\n        }\n    }\n    return returnObj;\n}\n/**\n * Writes a `LogEntry` to `stdout`/`stderr` (depending on severity).\n * @param entry The `LogEntry` including severity, message, and any additional structured metadata.\n */\nfunction write(entry) {\n    if (common_1.SUPPORTS_STRUCTURED_LOGS) {\n        common_1.UNPATCHED_CONSOLE[common_1.CONSOLE_SEVERITY[entry.severity]](JSON.stringify(removeCircular(entry)));\n        return;\n    }\n    let message = entry.message || '';\n    const jsonPayload = {};\n    let jsonKeyCount = 0;\n    for (const k in entry) {\n        if (!['severity', 'message'].includes(k)) {\n            jsonKeyCount++;\n            jsonPayload[k] = entry[k];\n        }\n    }\n    if (jsonKeyCount > 0) {\n        message = `${message} ${JSON.stringify(removeCircular(jsonPayload), null, 2)}`;\n    }\n    common_1.UNPATCHED_CONSOLE[common_1.CONSOLE_SEVERITY[entry.severity]](message);\n}\nexports.write = write;\n/**\n * Writes a `DEBUG` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\nfunction debug(...args) {\n    write(entryFromArgs('DEBUG', args));\n}\nexports.debug = debug;\n/**\n * Writes an `INFO` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\nfunction log(...args) {\n    write(entryFromArgs('INFO', args));\n}\nexports.log = log;\n/**\n * Writes an `INFO` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\nfunction info(...args) {\n    write(entryFromArgs('INFO', args));\n}\nexports.info = info;\n/**\n * Writes a `WARNING` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\nfunction warn(...args) {\n    write(entryFromArgs('WARNING', args));\n}\nexports.warn = warn;\n/**\n * Writes an `ERROR` severity log. If the last argument provided is a plain object,\n * it is added to the `jsonPayload` in the Cloud Logging entry.\n * @param args Arguments, concatenated into the log message with space separators.\n */\nfunction error(...args) {\n    write(entryFromArgs('ERROR', args));\n}\nexports.error = error;\n/** @hidden */\nfunction entryFromArgs(severity, args) {\n    let entry = {};\n    const lastArg = args[args.length - 1];\n    if (lastArg && typeof lastArg == 'object' && lastArg.constructor == Object) {\n        entry = args.pop();\n    }\n    return Object.assign({}, entry, {\n        severity,\n        // mimic `console.*` behavior, see https://nodejs.org/api/console.html#console_console_log_data_args\n        message: util_1.format.apply(null, args),\n    });\n}\n"]},"metadata":{},"sourceType":"script"}